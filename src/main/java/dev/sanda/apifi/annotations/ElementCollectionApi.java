package dev.sanda.apifi.annotations;

import dev.sanda.apifi.code_generator.entity.operation_types_enums.ElementCollectionEndpointType;
import dev.sanda.apifi.service.api_hooks.ElementCollectionApiHooks;
import dev.sanda.apifi.service.api_hooks.NullElementCollectionApiHooks;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * When placed on a field of type {@code Collection<T>} of a JPA Entity annotated class
 * where the {@code T} is of a java native type such as String, Integer, etc.
 * and is annotated as {@code @ElementCollection}.
 * This annotation uses {@code ElementCollectionEndpointType} enum
 * value argument options to delineate autogenerated GraphQL resolver methods
 * along with their respective spring security annotations (if required).
 *
 * For example:
 * <pre>{@code
 * @Data
 * @Entity
 * public class User {
 *   @Id
 *   @GeneratedValue
 *   private Long id;
 *   @ElementCollection
 *   @ElementCollectionApi(
 *       endpoints = {
 *               ADD_TO, REMOVE__FROM, PAGINATED__BATCH_, PAGINATED__FREE__TEXT_SEARCH,
 *      }
 * )
 * private Set<String> favoriteQuotes;
 *   //...
 * }
 * }</pre>
 * Will translate into the following GraphQL query resolvers:
 * <pre>{@Code
 *
 *   @GraphQLMutation
 *   public List<String> addFavoriteQuotesToUser(User owner, List<String> input) {
 *     return apiLogic.addToElementCollection(owner, "favoriteQuotes", input, null);
 *   }
 *
 *   @GraphQLMutation
 *   public List<String> removeFavoriteQuotesFromUser(User owner, List<String> input) {
 *     return apiLogic.removeFromElementCollection(owner, "favoriteQuotes", input, null);
 *   }
 *
 *   @GraphQLQuery
 *   public Page<String> favoriteQuotesOfUser(User owner, PageRequest input) {
 *     return apiLogic.getPaginatedBatchInElementCollection(owner, input, "favoriteQuotes", null);
 *   }
 *
 *   @GraphQLQuery
 *   public Page<String> freeTextSearchFavoriteQuotesOfUser(User owner,
 *       FreeTextSearchPageRequest input) {
 *     return apiLogic.getFreeTextSearchPaginatedBatchInElementCollection(owner, input, "favoriteQuotes", null);
 *   }
 * }</pre>
 */
@Target({ ElementType.FIELD, ElementType.METHOD })
@Retention(RetentionPolicy.RUNTIME)
public @interface ElementCollectionApi {
  /**
   * Array of {@code ElementCollectionEndpointType} enum values denoting
   * which query resolvers should be autogenerated at compile time.
   */
  ElementCollectionEndpointType[] endpoints();

  /**
   * @return  Class type for spring managed component class
   *          implementing the {@code ElementCollectionApiHooks}
   *          interface contract. This allows apifi
   *          to execute customized logic before and / or after CRUD
   *          operations.
   */
  Class<? extends ElementCollectionApiHooks> apiHooks() default NullElementCollectionApiHooks.class;

  /**
   * spring security annotations denoting
   * authorization policies  to accessing all autogenerated
   * query resolver methods delineated in
   * the arguments passed to {@code endpoints()}
   */
  String secured() default "";

  String[] rolesAllowed() default "";

  String preAuthorize() default "";

  String postAuthorize() default "";

  String preFilter() default "";

  String preFilterTarget() default "";

  String postFilter() default "";

  String securedAdd() default "";

  /**
   * spring security annotations denoting
   * authorization policies  to the autogenerated
   * query resolver method delineated in
   * the {@code ADD_TO} argument (if) passed to {@code endpoints()}
   */
  String[] rolesAllowedAdd() default "";

  String preAuthorizeAdd() default "";

  String postAuthorizeAdd() default "";

  String preFilterAdd() default "";

  String preFilterTargetAdd() default "";

  String postFilterAdd() default "";

  /**
   * spring security annotations denoting
   * authorization policies  to the autogenerated
   * query resolver method delineated in
   * the {@code REMOVE__FROM} argument (if) passed to {@code endpoints()}
   */
  String securedRemove() default "";

  String[] rolesAllowedRemove() default "";

  String preAuthorizeRemove() default "";

  String postAuthorizeRemove() default "";

  String preFilterRemove() default "";

  String preFilterTargetRemove() default "";

  String postFilterRemove() default "";

  /**
   * spring security annotations denoting
   * authorization policies  to the autogenerated
   * query resolver method delineated in
   * the {@code PAGINATED__BATCH_} argument (if) passed to {@code endpoints()}
   */
  String securedGetPaginated() default "";

  String[] rolesAllowedGetPaginated() default "";

  String preAuthorizeGetPaginated() default "";

  String postAuthorizeGetPaginated() default "";

  String preFilterGetPaginated() default "";

  String preFilterTargetGetPaginated() default "";

  String postFilterGetPaginated() default "";

  /**
   * spring security annotations denoting
   * authorization policies  to the autogenerated
   * query resolver method delineated in
   * the {@code PAGINATED__FREE__TEXT_SEARCH} argument (if) passed to {@code endpoints()}
   */
  String securedFreeTextSearch() default "";

  String[] rolesAllowedFreeTextSearch() default "";

  String preAuthorizeFreeTextSearch() default "";

  String postAuthorizeFreeTextSearch() default "";

  String preFilterFreeTextSearch() default "";

  String preFilterTargetFreeTextSearch() default "";

  String postFilterFreeTextSearch() default "";
}
