package dev.sanda.apifi.utils;

import lombok.AccessLevel;
import lombok.Getter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Getter
@Component
public class ConfigValues {

  // data layer operations logging
  @Value("#{new Boolean('${datafi.logging-enabled:false}')}")
  private Boolean datafiLoggingEnabled;

  // graphql subscriptions over apollo websockets
  @Value("#{new Boolean('${apifi.subscriptions.ws.enabled:true}')}")
  private Boolean wsEnabled;

  @Value("#{new Boolean('${apifi.subscriptions.ws.keepalive.enabled:true}')}")
  private Boolean wsKeepAliveEnabled;

  @Value("#{new Long('${apifi.subscriptions.ws.keepalive.interval-ms:10000}')}")
  private Long wsKeepAliveInterval;

  @Value("${apifi.subscriptions.ws.endpoint:/graphql}")
  private String wsEndpoint;

  // graphql subscriptions over SSE
  @Value("#{new Long('${apifi.subscriptions.sse.timeout-ms:-1}')}")
  private Long sseTimeout;

  @Value(
    "#{new Boolean('${apifi.subscriptions.sse.timeout-param-enabled:true}')}"
  )
  private Boolean sseTimeoutParamEnabled;

  @Value("${apifi.subscriptions.sse-endpoint:/graphql/sse}")
  private String sseEndpoint;

  // autogenerated graphql subscriptions publishing events config
  @Value(
    "#{new Long('${apifi.subscriptions.pending-transaction-retry-interval:50}')}"
  )
  private Long pendingTransactionRetryInterval;

  @Value(
    "#{new Long('${apifi.subscriptions.pending-transaction-timeout:500}')}"
  )
  private Long pendingTransactionTimeout;

  // redis config properties
  @Getter(AccessLevel.NONE)
  @Value("${apifi.subscriptions.redis-pubsub-url:@null}")
  private String redisPubSubUrlConfigProp;

  @Getter(AccessLevel.NONE)
  @Value("${REDIS_PUBSUB_URL:@null}")
  private String redisPubSubUrlEnvVar;

  public String getRedisPubSubUrl() {
    return redisPubSubUrlEnvVar != null
      ? redisPubSubUrlEnvVar
      : redisPubSubUrlConfigProp;
  }
}
