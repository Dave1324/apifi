package dev.sanda.apifi.annotations;

import dev.sanda.apifi.code_generator.entity.operation_types_enums.MapElementCollectionEndpointType;
import dev.sanda.apifi.service.api_hooks.MapElementCollectionApiHooks;
import dev.sanda.apifi.service.api_hooks.NullMapElementCollectionApiHooks;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * When placed on a field of type {@code Map<K,V>} of a JPA Entity annotated class
 * where the types {@code K, V} are java native such as String, Integer, etc.
 * and is annotated as {@code @ElementCollection}.
 * This annotation uses {@code MapElementCollectionEndpointType} enum
 * value argument options to delineate autogenerated GraphQL resolver methods
 * along with their respective spring security annotations (if required).
 *
 * For example:
 * <pre>{@code
 * @Data
 * @Entity
 * public class User {
 *   @Id
 *   @GeneratedValue
 *   private Long id;
 *
 *   @ElementCollection
 *   @CollectionTable(name = "tags")
 *   @MapKeyColumn(name = "tag")
 *   @Column(name = "count")
 *   @MapElementCollectionApi(
 *     endpoints = {
 *       PUT_ALL, REMOVE_ALL, PAGINATED__BATCH__,
 *     }
 *   )
 *   private Map<String, Integer> tagCount;
 *
 *   //...
 * }
 * }</pre>
 * Will translate into the following GraphQL query resolvers:
 * <pre>{@Code
 *
 *   @GraphQLMutation
 *   public Map<String, Integer> addTagCountToPost(
 *     Post owner,
 *     Map<String, Integer> input
 *   ) {
 *     return apiLogic.addToMapElementCollection(...);
 *   }
 *
 *   @GraphQLMutation
 *   public Map<String, Integer> removeTagCountFromPost(Post owner, List<String> input) {
 *     return apiLogic.removeFromMapElementCollection(...);
 *   }
 *
 *   @GraphQLQuery
 *   public Page<Map.Entry<String, Integer>> tagCountOfPost(Post owner, PageRequest input) {
 *     return apiLogic.getPaginatedBatchInMapElementCollection(...);
 *   }
 *
 *   @GraphQLQuery
 *   public Page<Map.Entry<String, Integer>> freeTextSearchTagCountOfPost( Post owner, FreeTextSearchPageRequest input) {
 *     return apiLogic.getFreeTextSearchPaginatedBatchInMapElementCollection(...);
 *   }
 * }</pre>
 */
@Target({ ElementType.FIELD, ElementType.METHOD })
@Retention(RetentionPolicy.RUNTIME)
public @interface MapElementCollectionApi {
  /**
   * Array of {@code MapElementCollectionEndpointType} enum values denoting
   * which query resolvers should be autogenerated at compile time.
   */
  MapElementCollectionEndpointType[] endpoints();

  /**
   * Class type for spring managed component class
   *          implementing the {@code MapElementCollectionApiHooks}
   *          interface contract. This allows apifi
   *          to execute customized logic before and / or after CRUD
   *          operations.
   */
  Class<? extends MapElementCollectionApiHooks> apiHooks() default NullMapElementCollectionApiHooks.class;

  /**
   * spring security annotations denoting
   * authorization policies  to accessing all autogenerated
   * query resolver methods delineated in
   * the arguments passed to {@code endpoints()}
   */
  String secured() default "";

  String[] rolesAllowed() default "";

  String preAuthorize() default "";

  String postAuthorize() default "";

  String preFilter() default "";

  String preFilterTarget() default "";

  String postFilter() default "";

  /**
   * spring security annotations denoting
   * authorization policies  to the autogenerated
   * query resolver method delineated in
   * the {@code PUT_ALL} argument (if) passed to {@code endpoints()}
   */
  String securedPut() default "";

  String[] rolesAllowedPut() default "";

  String preAuthorizePut() default "";

  String postAuthorizePut() default "";

  String preFilterPut() default "";

  String preFilterTargetPut() default "";

  String postFilterPut() default "";

  /**
   * spring security annotations denoting
   * authorization policies  to the autogenerated
   * query resolver method delineated in
   * the {@code REMOVE_ALL} argument (if) passed to {@code endpoints()}
   */
  String securedRemove() default "";

  String[] rolesAllowedRemove() default "";

  String preAuthorizeRemove() default "";

  String postAuthorizeRemove() default "";

  String preFilterRemove() default "";

  String preFilterTargetRemove() default "";

  String postFilterRemove() default "";

  /**
   * spring security annotations denoting
   * authorization policies  to the autogenerated
   * query resolver method delineated in
   * the {@code PAGINATED__BATCH__} argument (if) passed to {@code endpoints()}
   */
  String securedGetPaginated() default "";

  String[] rolesAllowedGetPaginated() default "";

  String preAuthorizeGetPaginated() default "";

  String postAuthorizeGetPaginated() default "";

  String preFilterGetPaginated() default "";

  String preFilterTargetGetPaginated() default "";

  String postFilterGetPaginated() default "";
}
